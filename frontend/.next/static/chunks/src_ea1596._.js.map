{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lunaj/OneDrive/Escritorio/rubikmoon/frontend/src/components/Cell.tsx"],"sourcesContent":["\r\n'use client';\r\nimport React from 'react';\r\n\r\ninterface CellProps {\r\n  color: string;\r\n  size?: 'tiny' | 'small' | 'normal';\r\n  onClick?: () => void;\r\n}\r\n\r\nconst Cell: React.FC<CellProps> = ({ color, size = 'normal', onClick }) => {\r\n  const cellSize = \r\n                  size === 'tiny' ? 'w-4 h-4' :    // 16px x 16px\r\n                  size === 'small' ? 'w-8 h-8' :   // 32px x 32px\r\n                  'w-16 h-16';  \r\n  \r\n  return (\r\n    <div \r\n      className={`${cellSize} border-2 border-gray-800 rounded-sm cursor-pointer transition-all duration-200 hover:opacity-80`}\r\n      style={{ backgroundColor: color }}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Cell;"],"names":[],"mappings":";;;;AACA;;AASA,MAAM,OAA4B,CAAC,EAAE,KAAK,EAAE,OAAO,QAAQ,EAAE,OAAO,EAAE;IACpE,MAAM,WACU,SAAS,SAAS,YAClB,SAAS,UAAU,YACnB;IAEhB,qBACE,6LAAC;QACC,WAAW,GAAG,SAAS,gGAAgG,CAAC;QACxH,OAAO;YAAE,iBAAiB;QAAM;QAChC,SAAS;;;;;;AAGf;KAbM;uCAeS"}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lunaj/OneDrive/Escritorio/rubikmoon/frontend/src/components/Modal.tsx"],"sourcesContent":["import React from 'react';\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onPlayAgain: () => void;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, onPlayAgain }) => {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\r\n      <div className=\"bg-white p-8 rounded-lg shadow-lg text-center\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-black\">¡Puzzle completado!</h2>\r\n        <p className=\"mb-8 text-black\">¡Felicidades! Has completado el puzzle.</p>\r\n        <div className=\"flex justify-center gap-4\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors\"\r\n          >\r\n            Aceptar\r\n          </button>\r\n          <button\r\n            onClick={onPlayAgain}\r\n            className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n          >\r\n            Jugar de nuevo\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;"],"names":[],"mappings":";;;;;AAQA,MAAM,QAA8B,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE;IACnE,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAG,WAAU;8BAAqC;;;;;;8BACnD,6LAAC;oBAAE,WAAU;8BAAkB;;;;;;8BAC/B,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BACC,SAAS;4BACT,WAAU;sCACX;;;;;;sCAGD,6LAAC;4BACC,SAAS;4BACT,WAAU;sCACX;;;;;;;;;;;;;;;;;;;;;;;AAOX;KAzBM;uCA2BS"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lunaj/OneDrive/Escritorio/rubikmoon/frontend/src/components/SolutionModal.tsx"],"sourcesContent":["// components/SolutionModal.tsx\r\nimport React from 'react';\r\n\r\ninterface SolutionModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  steps: number;\r\n  time: number;\r\n}\r\n\r\nconst SolutionModal: React.FC<SolutionModalProps> = ({ isOpen, onClose, steps, time }) => {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\r\n      <div className=\"bg-white p-8 rounded-lg shadow-lg text-center\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-black\">¡Solución encontrada!</h2>\r\n        \r\n        <div className=\"space-y-4 mb-8\">\r\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n            <p className=\"text-lg font-semibold text-black\">\r\n              Número de pasos: <span className=\"text-blue-600\">{steps}</span>\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n            <p className=\"text-lg font-semibold text-black\">\r\n              Tiempo: <span className=\"text-blue-600\">{time}</span> segundos\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-center\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n          >\r\n            Aceptar\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolutionModal;"],"names":[],"mappings":"AAAA,+BAA+B;;;;;;AAU/B,MAAM,gBAA8C,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;IACnF,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAG,WAAU;8BAAqC;;;;;;8BAEnD,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAE,WAAU;;oCAAmC;kDAC7B,6LAAC;wCAAK,WAAU;kDAAiB;;;;;;;;;;;;;;;;;sCAItD,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAE,WAAU;;oCAAmC;kDACtC,6LAAC;wCAAK,WAAU;kDAAiB;;;;;;oCAAY;;;;;;;;;;;;;;;;;;8BAK3D,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBACC,SAAS;wBACT,WAAU;kCACX;;;;;;;;;;;;;;;;;;;;;;AAOX;KAjCM;uCAmCS"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lunaj/OneDrive/Escritorio/rubikmoon/frontend/src/components/GameBoard.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState, useRef } from 'react';\r\nimport Cell from './Cell';\r\nimport Modal from './Modal';\r\nimport SolutionModal from './SolutionModal';\r\n\r\nconst COLORS = {\r\n  YELLOW: '#ffd000',\r\n  GREEN: '#2db48e',\r\n  BLUE: '#3291d1',\r\n  BLUED: '#3b21e4',\r\n  PURPLE: '#8a1aee',\r\n  CLARITO: '#8c8cd4',\r\n  GRAY: '#000000'  // Casilla vacía\r\n};\r\n\r\nconst GameBoard = () => {\r\n  const [mainBoard, setMainBoard] = useState<string[][]>([]);\r\n  const [miniBoard, setMiniBoard] = useState<string[][]>([]);\r\n  const [solution, setSolution] = useState<any[]>([]);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [isSolving, setIsSolving] = useState(false);\r\n  const [currentInstruction, setCurrentInstruction] = useState<string>(\"\");\r\n  const [solutionSteps, setSolutionSteps] = useState<any[]>([]);\r\n  const [currentStepIndex, setCurrentStepIndex] = useState<number>(0);\r\n  const [isGuiding, setIsGuiding] = useState<boolean>(false);\r\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n  const [boardHistory, setBoardHistory] = useState<string[][][]>([]);\r\n  const sliderRef = useRef<HTMLDivElement>(null);\r\n  const [currentBoardIndex, setCurrentBoardIndex] = useState<number>(0);\r\n  const [isSolutionModalOpen, setIsSolutionModalOpen] = useState(false);\r\n  const [solutionData, setSolutionData] = useState({ steps: 0, time: '0.00' });\r\n\r\n  const findEmptyCell = () => {\r\n    for (let i = 0; i < 5; i++) {\r\n      for (let j = 0; j < 5; j++) {\r\n        if (mainBoard[i][j] === COLORS.GRAY) {\r\n          return { row: i, col: j };\r\n        }\r\n      }\r\n    }\r\n    return { row: -1, col: -1 };\r\n  };\r\n\r\n  const isValidMove = (row: number, col: number) => {\r\n    const emptyCell = findEmptyCell();\r\n    return (\r\n      (row === emptyCell.row + 1 && col === emptyCell.col) ||\r\n      (row === emptyCell.row - 1 && col === emptyCell.col) ||\r\n      (row === emptyCell.row && col === emptyCell.col + 1) ||\r\n      (row === emptyCell.row && col === emptyCell.col - 1)\r\n    );\r\n  };\r\n\r\n  const handleMove = (row: number, col: number) => {\r\n    const emptyCell = findEmptyCell();\r\n    \r\n    // Verificar si el movimiento es válido\r\n    if (!isValidMove(row, col)) {\r\n      return;\r\n    }\r\n\r\n    \r\n  \r\n    // Si estamos en modo guiado\r\n    if (isGuiding && currentStepIndex < solutionSteps.length) {\r\n      const currentStep = solutionSteps[currentStepIndex];\r\n      const [expectedRow, expectedCol] = currentStep.movement;\r\n      \r\n      // Verificar si es el movimiento esperado\r\n      if (row !== expectedRow || col !== expectedCol) {\r\n        return;\r\n      }\r\n  \r\n      const newBoard = mainBoard.map(row => [...row]);\r\n      [newBoard[emptyCell.row][emptyCell.col], newBoard[row][col]] = \r\n      [newBoard[row][col], newBoard[emptyCell.row][emptyCell.col]];\r\n      \r\n      setMainBoard(newBoard);\r\n\r\n      if (boardHistory.length === 0){\r\n          setBoardHistory([mainBoard]);\r\n      }\r\n      \r\n      setBoardHistory(prevHistory => {\r\n        const lastBoard = prevHistory[prevHistory.length - 1];\r\n        if (JSON.stringify(lastBoard) !== JSON.stringify(newBoard)) {\r\n          return [...prevHistory, newBoard];\r\n        }\r\n        return prevHistory;\r\n      });\r\n\r\n      // Actualizamos el índice al último estado\r\n      setCurrentBoardIndex(boardHistory.length);\r\n\r\n      // Avanzar al siguiente paso\r\n      if (currentStepIndex < solutionSteps.length - 1) {\r\n        const nextIndex = currentStepIndex + 1;\r\n        setCurrentStepIndex(nextIndex);\r\n        setCurrentInstruction(solutionSteps[nextIndex].direction);\r\n      } else {\r\n        setIsGuiding(false);\r\n        setCurrentInstruction(\"¡Puzzle completado!\");\r\n        setIsModalOpen(true);\r\n      }\r\n    } else {\r\n      // Movimiento normal fuera del modo guiado\r\n      const newBoard = mainBoard.map(row => [...row]);\r\n      [newBoard[emptyCell.row][emptyCell.col], newBoard[row][col]] = \r\n      [newBoard[row][col], newBoard[emptyCell.row][emptyCell.col]];\r\n      \r\n      setMainBoard(newBoard);\r\n    }\r\n\r\n  };\r\n\r\n  const findEmptyCellInBoard = (board: string[][]) => {\r\n    for (let i = 0; i < board.length; i++) {\r\n      for (let j = 0; j < board[i].length; j++) {\r\n        if (board[i][j] === COLORS.GRAY) {\r\n          return { row: i, col: j };\r\n        }\r\n      }\r\n    }\r\n    return { row: -1, col: -1 };\r\n  };\r\n\r\n  const isValidMoveForBoard = (row: number, col: number, board: string[][]) => {\r\n    const emptyCell = findEmptyCellInBoard(board);\r\n    return (\r\n      (row === emptyCell.row + 1 && col === emptyCell.col) ||\r\n      (row === emptyCell.row - 1 && col === emptyCell.col) ||\r\n      (row === emptyCell.row && col === emptyCell.col + 1) ||\r\n      (row === emptyCell.row && col === emptyCell.col - 1)\r\n    );\r\n  };\r\n\r\n  const validateSolution = (steps: any[]) => {\r\n    let currentBoard = mainBoard.map(row => [...row]);\r\n    \r\n    for (const step of steps) {\r\n      const emptyCell = findEmptyCellInBoard(currentBoard);\r\n      const [targetRow, targetCol] = step.movement;\r\n      \r\n      // Verificar si el movimiento es válido\r\n      if (!isValidMoveForBoard(targetRow, targetCol, currentBoard)) {\r\n        return false;\r\n      }\r\n      \r\n      // Actualizar el tablero\r\n      const newBoard = currentBoard.map(row => [...row]);\r\n      [newBoard[emptyCell.row][emptyCell.col], newBoard[targetRow][targetCol]] = \r\n      [newBoard[targetRow][targetCol], newBoard[emptyCell.row][emptyCell.col]];\r\n      currentBoard = newBoard;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  const parseBoard = (boardString: string, size: number) => {\r\n    const rows = boardString.split(',');\r\n    return rows.slice(0, size).map(row => row.slice(0, size).split('').map(char => {\r\n      switch (char) {\r\n        case 'Y': return COLORS.YELLOW;\r\n        case 'G': return COLORS.GREEN;\r\n        case 'B': return COLORS.BLUE;\r\n        case 'D': return COLORS.BLUED;\r\n        case 'P': return COLORS.PURPLE;\r\n        case 'C': return COLORS.CLARITO;\r\n        case '*': return COLORS.GRAY;\r\n        default: return COLORS.GRAY;\r\n      }\r\n    }));\r\n  };\r\n\r\n  const loadBoardsFromFile = async () => {\r\n    setSolution([]);\r\n    setCurrentStep(0);\r\n    setIsSolving(false);\r\n    setBoardHistory([]);\r\n    const response = await fetch('/test-cases.txt');\r\n    const fileContent = await response.text();\r\n    const cases = fileContent.split('\\n').filter(line => line.trim() !== '');\r\n    const randomCase = cases[Math.floor(Math.random() * cases.length)];\r\n    const [mainBoardString, miniBoardString] = randomCase.split('|');\r\n\r\n    const newMainBoard = parseBoard(mainBoardString, 5);\r\n    const newMiniBoard = parseBoard(miniBoardString, 3);\r\n\r\n    setMainBoard(newMainBoard);\r\n    setMiniBoard(newMiniBoard);\r\n  };\r\n\r\n  const solvePuzzle = async () => {\r\n    try {\r\n      setIsSolving(true);\r\n      const response = await fetch('http://localhost:8000/api/solve', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          mainBoard,\r\n          targetBoard: miniBoard\r\n        })\r\n      });\r\n  \r\n      const data = await response.json();\r\n      console.log('Solución recibida:', data);\r\n  \r\n      if (data.success && data.solution && data.solution.length > 0) {\r\n        // Validar que cada paso de la solución es válido\r\n        if (validateSolution(data.solution)) {\r\n          setSolutionSteps(data.solution);\r\n          setCurrentStepIndex(0);\r\n          setIsGuiding(true);\r\n          setCurrentInstruction(data.solution[0].direction);\r\n      \r\n          setSolutionData({\r\n            steps: data.steps,\r\n            time: data.time\r\n          });\r\n          setIsSolutionModalOpen(true);\r\n\r\n        } else {\r\n          alert('La solución recibida contiene movimientos inválidos');\r\n        }\r\n      } else {\r\n        alert('No se encontró solución');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      alert('Error al buscar solución');\r\n    } finally {\r\n      setIsSolving(false);\r\n    }\r\n  };\r\n\r\n  const scrollLeft = () => {\r\n    if (currentBoardIndex > 0) {\r\n      setCurrentBoardIndex(prev => prev - 1);\r\n      if (sliderRef.current) {\r\n        sliderRef.current.scrollLeft -= 200;\r\n      }\r\n    }\r\n  };\r\n  \r\n  const scrollRight = () => {\r\n    if (currentBoardIndex < boardHistory.length - 1) {\r\n      setCurrentBoardIndex(prev => prev + 1);\r\n      if (sliderRef.current) {\r\n        sliderRef.current.scrollLeft += 200;\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetGuide = () => {\r\n    setIsGuiding(false);\r\n    setCurrentStepIndex(0);\r\n    setCurrentInstruction(\"\");\r\n  };\r\n\r\n  const handlePlayAgain = () => {\r\n    setIsModalOpen(false);\r\n    resetGuide();\r\n    setBoardHistory([]);\r\n    loadBoardsFromFile();\r\n\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    loadBoardsFromFile();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n\r\n      <div className=\"flex flex-1\">\r\n        {/* Columna izquierda - Tableros */}\r\n        <div className=\"w-2/3 flex flex-col items-center justify-center gap-8 p-8 bg-black\">\r\n          {/* Mini tablero (objetivo) */}\r\n          <div className=\"grid grid-cols-3 gap-1\">\r\n            {miniBoard.map((row, i) =>\r\n              row.map((color, j) => (\r\n                <Cell key={`mini-${i}-${j}`} color={color} size=\"small\" />\r\n              ))\r\n            )}\r\n          </div>\r\n\r\n          {/* Tablero principal */}\r\n          <div className=\"p-4 bg-black rounded-lg\">\r\n            <div className=\"grid grid-cols-5 gap-1\">\r\n              {mainBoard.map((row, i) =>\r\n                row.map((color, j) => (\r\n                  <Cell \r\n                    key={`main-${i}-${j}`} \r\n                    color={color}\r\n                    onClick={() => handleMove(i, j)}\r\n                  />\r\n                ))\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Columna derecha - Botones */}\r\n        <div className=\"w-1/3 flex flex-col items-center justify-center gap-4 p-8 bg-black\">\r\n          <button \r\n            onClick={loadBoardsFromFile}\r\n            className=\"w-64 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n          >\r\n            Generar Nuevos Tableros\r\n          </button>\r\n\r\n          <button \r\n            onClick={solvePuzzle}\r\n            disabled={isSolving}\r\n            className=\"w-64 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n          >\r\n            {isSolving ? 'Resolviendo...' : 'Resolver Puzzle'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n        {/* Slider de historial - En la parte inferior */}\r\n        {boardHistory.length >= 2 && (\r\n          <div className=\"w-full px-8 pb-8\">\r\n            <div className=\"w-full flex items-center justify-center gap-4 p-4 bg-gray-800 rounded-lg\">\r\n              <button \r\n                onClick={scrollLeft}\r\n                disabled={currentBoardIndex === 0}\r\n                className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50 transition-colors\"\r\n              >\r\n                ←\r\n              </button>\r\n\r\n              <div \r\n                ref={sliderRef} \r\n                className=\"flex overflow-x-auto transition-all duration-300 ease-in-out\"\r\n                style={{\r\n                  maxWidth: '800px',\r\n                  scrollBehavior: 'smooth',\r\n                  WebkitOverflowScrolling: 'touch',\r\n                  scrollbarWidth: 'none',\r\n                  msOverflowStyle: 'none'\r\n                }}\r\n              >\r\n                {boardHistory.map((board, index) => (\r\n                  <div \r\n                    key={index}\r\n                    className={`flex-shrink-0 p-2 transition-all duration-200 ${\r\n                      currentBoardIndex === index ? 'border-2 border-blue-500' : ''\r\n                    }`}\r\n                  >\r\n                    <div className=\"grid grid-cols-5 gap-1\">\r\n                      {board.map((row, i) =>\r\n                        row.map((color, j) => (\r\n                          <Cell \r\n                            key={`history-${index}-${i}-${j}`} \r\n                            color={color}\r\n                            size=\"tiny\"\r\n                          />\r\n                        ))\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              <button \r\n                onClick={scrollRight}\r\n                disabled={currentBoardIndex === boardHistory.length - 1}\r\n                className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50 transition-colors\"\r\n              >\r\n                →\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n      {/* Modal */}\r\n      <Modal \r\n        isOpen={isModalOpen} \r\n        onClose={() => setIsModalOpen(false)} \r\n        onPlayAgain={handlePlayAgain} \r\n      />\r\n\r\n      <SolutionModal\r\n        isOpen={isSolutionModalOpen}\r\n        onClose={() => setIsSolutionModalOpen(false)}\r\n        steps={solutionData.steps}\r\n        time={parseFloat(solutionData.time)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 713, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}